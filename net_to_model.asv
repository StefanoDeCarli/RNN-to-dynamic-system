% Clear the workspace and initialize consistent random values
clc;
clear;
close all;
random_seed = 1;
rng(random_seed);

% Utility functions directory
addpath(genpath([pwd, filesep, 'utilities']));

load("SMI_data.mat");
load("lstm_4L_256_256_128_64_0.004.mat")

train_dataset = SMI_data.train_30s;

train_dataset.x = transpose_cell(train_dataset.x);
train_dataset.y = transpose_cell(train_dataset.y);

trial = 7;

input = train_dataset.x{trial};

% Extract the weights from the net
weigths = RNN_extract_weights(net_results.net);
% Initialize the state for each prediction
state = initialize_state(weigths);

% Execute the prediction as a dynamic system for the whole sequence
[output, state_storage] = net_model(input,weigths,state);

temperature = 1;
t = (1:height(output)) * 30;

% Predict with network
nn_pred = predict(net_results.net, SMI_data.train_30s.x{trial}')';

% Plot the results
F = figure;
hold on;
plot(t, output(:,temperature), 'LineWidth', 2);
plot(t, output(:,temperature), 'LineWidth', 2);
plot(t, train_dataset.y{trial}(:,temperature), 'LineWidth', 2);
xlabel('Time (t)', 'FontSize', 14);
ylabel('Normalized T', 'FontSize', 14);
legend('model', 'network', 'real', 'Location', 'northeast', 'FontSize', 10);
% title('Strict Input-to-State Stability (ISS) Condition', 'FontSize', 16);
F.Color = 'w';
grid on;
hold off;

%% Useful functions for the test
function cell_array = transpose_cell(cell_array)
    for i = 1:length(cell_array)
        cell_array{i} = transpose(cell_array{i});
    end 
end